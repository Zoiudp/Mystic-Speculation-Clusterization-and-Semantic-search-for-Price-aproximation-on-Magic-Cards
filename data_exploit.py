def get_data():
    prices = pd.read_csv('/cardPrices.csv')

    print(prices)

    cards = pd.read_csv('/content/drive/Shareddrives/Ufla/Pattern_Recognition/cards.csv')

    print(cards)

    df = cards.merge(prices, left_on= 'uuid', right_on= 'uuid')

    print(df)

    print(df.columns)

    unwanted_list = ('artist', 'artistIds', 'asciiName', 'attractionLights', 'availability',
       'boosterTypes', 'borderColor', 'cardParts', 'colorIdentity',
       'colorIndicator', 'colors', 'defense', 'duelDeck', 'manaCost',
       'faceConvertedManaCost', 'faceFlavorName', 'edhrecRank',	'edhrecSaltiness',
       'faceManaValue', 'faceName', 'finishes', 'flavorName', 'flavorText',
       'frameEffects', 'frameVersion', 'hand', 'hasAlternativeDeckLimit',
       'hasContentWarning', 'hasFoil', 'hasNonFoil', 'isAlternative',
       'isFullArt', 'isFunny', 'isOnlineOnly', 'isOversized', 'isPromo',
       'isRebalanced', 'isReprint', 'isReserved', 'isStarter',
       'isStorySpotlight', 'isTextless', 'isTimeshifted', 'keywords',
       'language', 'layout', 'leadershipSkills', 'life',
       'number', 'originalPrintings',
       'originalReleaseDate', 'originalText', 'otherFaceIds',
       'printings', 'promoTypes', 'rebalancedPrintings',
       'relatedCards', 'securityStamp', 'setCode', 'side', 'signature',
       'sourceProducts', 'subsets', 'subtypes', 'supertypes', 'type', 'types', 'uuid', 'variations', 'watermark',
       'cardFinish', 'currency', 'date', 'gameAvailability',
       'priceProvider', 'providerListing')
    
    df_wanted = df.drop(columns=[col for col in df if col in unwanted_list])

    print(df_wanted)

    df_wanted.drop_duplicates('name', inplace = True)

    df_wanted.dropna(subset='originalType',inplace=True)

    df_wanted.fillna(-1,inplace=True)

    df_wanted['raridade'] = df_wanted['rarity'].astype('category').cat.codes

    df_wanted['classified_text'] = df_wanted['price'].astype('category').cat.codes

    print(df_wanted)

    df_name = df_wanted['name']
    df_wanted.drop(columns=['name'],inplace=True)
    df_wanted.set_index(df_name, inplace=True)

    return df_wanted

def type_dif (dfs):
    df_wanted2 = df_wanted.drop(columns='loyalty')
    notributes = ['power','toughness']
    df_wanted3 = df_wanted2.drop(columns= [col for col in df_wanted2 if col in notributes])
    df_wanted4 = df_wanted3.drop(columns='manaValue')
    df_wanted5 = df_wanted.drop(columns= [col for col in df_wanted2 if col in notributes])

    df_art = df_wanted2.loc[df_wanted['originalType'].str.contains('Artifact')]
    df_mag = df_wanted3.loc[df_wanted['originalType'].str.contains('Sorcery')]
    df_inst = df_wanted3.loc[df_wanted['originalType'].str.contains('Instant')]
    df_enc = df_wanted3.loc[df_wanted['originalType'].str.contains('Enchantment')]
    df_terr = df_wanted4.loc[df_wanted['originalType'].str.contains('Land')]
    df_crea = df_wanted2.loc[df_wanted['originalType'].str.contains('Creature')]
    df_planes = df_wanted5.loc[df_wanted['originalType'].str.contains('Planeswalker')]

    to_drop2 = ['*','1+*','2+*','-1','+1','+3','3.5','?','∞','2.5','1.5','99','.5','*²','+4','+0','+2',-1]
    for k in range(len(to_drop2)):
        df_crea = df_crea[df_crea.power != to_drop2[k]]
    
    to_drop2 = ['*','1+*','+1','3.5','?','1.5','0',-1]
    for k in range(len(to_drop2)):
        df_crea = df_crea[df_crea.toughness != to_drop2[k]]

    df_crea['power'] = df_crea['power'].astype(float)
    df_crea['toughness'] =df_crea['toughness'].astype(float)

    dfs = {'artefatos': df_art, 'magicas': df_mag, 'instants': df_inst, 'encantamentos': df_enc, 'terrenos': df_terr, 'criaturas': df_crea, 'planeswalker': df_planes}
    print(df_art)

    return dfs

def main():
    type_dif(get_data())


# Chamada para a função principal.
if __name__ == '__main__':
    main()